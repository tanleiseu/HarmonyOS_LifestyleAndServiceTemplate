import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';
import { hilog } from '@kit.PerformanceAnalysisKit';
import { window } from '@kit.ArkUI';
import { BusinessError, emitter } from '@kit.BasicServicesKit';
import { createNWeb, IJavaScriptConfig, IResourceConfig, WebProperties } from '@hw-agconnect/fast-web';
import { wxApi, wxEventHandler } from 'aggregated_payment';
import { EMITTER_TYPE } from 'common';
import { webview } from '@kit.ArkWeb';
import { PRIVACY_WEB } from '../pages/PrivacyPage';

export default class EntryAbility extends UIAbility {
  private widgetMessage: string = '';

  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {
    // 获取卡片router事件中传递的targetPage参数
    if (want?.parameters?.params) {
      let params: Record<string, string> = {}
      // want.parameters.params 对应 postCardAction() 中 params 内容
      try {
        params = JSON.parse(want.parameters.params as string);
      } catch (e) {
        console.log('want parameters params error')
      }
      this.widgetMessage = params.message as string;
    }
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');
  }

  onDestroy(): void {
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');
  }

  getSafeArea(windowStage: window.WindowStage) {
    let isLayoutFullScreen = true;
    let windowClass: window.Window = windowStage.getMainWindowSync(); // 获取应用主窗口
    let topAvoidArea = windowClass.getWindowAvoidArea(window.AvoidAreaType.TYPE_SYSTEM)
    let bottomAvoidArea = windowClass.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR)
    let bottomRectHeight = px2vp(bottomAvoidArea.bottomRect.height)
    let topRectHeight = px2vp(topAvoidArea.topRect.height)
    AppStorage.setOrCreate('bottomRectHeight', bottomRectHeight)
    AppStorage.setOrCreate('topRectHeight', topRectHeight)
    windowClass.setWindowLayoutFullScreen(isLayoutFullScreen)
      .then(() => {
        console.info('Succeeded in setting the window layout to full-screen mode.');
      })
      .catch((err: BusinessError) => {
        console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
      });
  }

  onWindowStageCreate(windowStage: window.WindowStage): void {
    // Main window is created, set main page for this ability
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');
    AppStorage.setOrCreate('widget_router', this.widgetMessage)
    windowStage.loadContent('pages/SplashPage', (err) => {
      if (err.code) {
        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');
        return;
      }
      // 包括原生Web组件的WebOptions、属性和事件
      const webProperties = new WebProperties();
      webProperties.defaultFontSize = 30;
      // 预编译的JavaScript资源
      const javaScriptConfigs: IJavaScriptConfig[] = [
        {
          url: '',
          localPath: '',
        }
      ]
      // 免拦截注入的离线资源如图片、样式表和脚本资源
      const resourceConfigs: IResourceConfig[] = [
        {
          localPath: '',
          urlList: [
            '',
          ],
          type: webview.OfflineResourceType.IMAGE,
        }
      ];
      // 预先创建一个空的ArkWeb动态组件（需传入UIContext），拉起渲染进程
      createNWeb(PRIVACY_WEB, windowStage.getMainWindowSync().getUIContext(), webProperties, javaScriptConfigs,
        resourceConfigs);
      this.getSafeArea(windowStage)
      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content.');
    });
  }

  // 如果UIAbility已在后台运行，在收到Router事件后会触发onNewWant生命周期回调
  onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {
    if (want?.parameters?.params) {
      let params: Record<string, string> = {}
      // want.parameters.params 对应 postCardAction() 中 params 内容
      try {
        params = JSON.parse(want.parameters.params as string);
      } catch (e) {
        console.log('want parameters params error')
      }
      this.widgetMessage = params.message as string;
      AppStorage.setOrCreate('widget_router', this.widgetMessage)
      let event: emitter.InnerEvent = {
        eventId: EMITTER_TYPE.WIDGET_ENTER,
      };
      emitter.emit(event);
    }
    this.handleWeChatCallIfNeed(want);
  }

  private handleWeChatCallIfNeed(want: Want) {
    wxApi.handleWant(want, wxEventHandler);
    let event: emitter.InnerEvent = {
      eventId:  EMITTER_TYPE.WX_PAY,
    };
    emitter.emit(event)
  }

  onWindowStageDestroy(): void {
    // Main window is destroyed, release UI related resources
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');
  }

  onForeground(): void {
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');
  }

  onBackground(): void {
    // Ability has back to background
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');
  }
}
